@model VerneMQViewModel
<h1 class="h1"><span class="fas fa-server"></span> @Tx.T("VerneMQ.Index.ViewTitle")</h1>

<div class="table-responsive">
	<table class="table">
		<tr>
			<td>@Tx.T("VerneMQ.Index.Uptime")</td>
			<td data-name="uptime">@Model.Uptime</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.ClientsOnline")</td>
			<td data-name="clientsOnline">@Model.ClientsOnline</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Subscriptions")</td>
			<td data-name="subscriptions">@Model.Subscriptions</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Data.Received")</td>
			<td data-name="dataReceived">@Model.DataReceived</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Data.Sent")</td>
			<td data-name="dataSent">@Model.DataSent</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Messages.Received")</td>
			<td data-name="messagesReceived">@Model.MessagesReceived</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Messages.Sent")</td>
			<td data-name="messagesSent">@Model.MessagesSent</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Messages.Retained")</td>
			<td data-name="retainedMessages">@Model.RetainedMessages</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Cluster.Received")</td>
			<td data-name="clusterReceived">@Model.ClusterReceived</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Cluster.Sent")</td>
			<td data-name="clusterSent">@Model.ClusterSent</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Cluster.Dropped")</td>
			<td data-name="clusterDropped">@Model.ClusterDropped</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Messages.Queued")</td>
			<td data-name="queued">@(Model.QueueIn - Model.QueueOut)</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Messages.Dropped")</td>
			<td data-name="queueDropped">@Model.QueueDropped</td>
		</tr>
		<tr>
			<td>@Tx.T("VerneMQ.Index.Memory")</td>
			<td data-name="usedMemory">@Model.UsedMemory</td>
		</tr>
	</table>
</div>

<div class="table-responsive mt-4">
	<table class="table" id="clients">
		<thead class="table-light">
			<tr>
				<th scope="col">@Tx.T("VerneMQ.Index.Clients.User")</th>
				<th scope="col">@Tx.T("VerneMQ.Index.Clients.ID")</th>
				<th scope="col">@Tx.T("VerneMQ.Index.Clients.Address")</th>
				<th scope="col">@Tx.T("VerneMQ.Index.Clients.Port")</th>
				<th scope="col">@Tx.T("VerneMQ.Index.Clients.Protocol")</th>
				<th scope="col">@Tx.T("VerneMQ.Index.Clients.State")</th>
				<th scope="col" class="text-center">@Tx.T("VerneMQ.Index.Clients.Clean")</th>
				<th scope="col">@Tx.T("VerneMQ.Index.Clients.SessionStart")</th>
			</tr>
		</thead>
		<tbody class="template">
			<tr>
				<td data-name="userName"></td>
				<td data-name="clientId"></td>
				<td data-name="ipAddress"></td>
				<td data-name="port"></td>
				<td data-name="protocolVersion"></td>
				<td data-name="status"></td>
				<td data-name="cleanSession" class="text-center"></td>
				<td data-name="sessionStart"></td>
			</tr>
		</tbody>
		<tbody class="items">
			@foreach (var client in Model.Clients)
			{
				<tr>
					<td>@client.UserName</td>
					<td>@client.ClientId</td>
					<td>@client.IpAddress</td>
					<td>@client.Port</td>
					<td>@client.ProtocolVersion</td>
					<td>@client.Status</td>
					<td class="text-center"><span class="fas @(client.CleanSession ? "fa-check text-success" : "fa-times text-warning")"></span></td>
					<td>@client.SessionStartTime.ToString("dd.MM.yyyy HH:mm:ss")</td>
				</tr>
			}
		</tbody>
	</table>
</div>

@section Scripts
{
	<script type="text/javascript">
		$(function () {
			let websocket = new signalR.HubConnectionBuilder()
				.withUrl('@Url.Action("Index", "Live")', {
					transport: signalR.HttpTransportType.WebSockets | signalR.HttpTransportType.LongPolling
				})
				// Trace, Information, Warning, Error, None
				.configureLogging(signalR.LogLevel.None)
				.withAutomaticReconnect()
				.build();

			websocket.start()
				.then(function () {
					websocket.on('UpdateVerneMQ', function (model) {
						$('[data-name]').each(function (_, el) {
							let key = $(el).data('name');
							$(el).text(model[key]);
						});
						$('[data-name="queued"]').text(Number(model.queueIn) - Number(model.queueOut));

						$('#clients .items').children().remove();
						for (let client of model.clients) {
							let dt = luxon.DateTime.fromMillis(client.sessionStart);
							let row = $('#clients .template').children().clone(true);

							$(row).find('[data-name]').each(function (_, el) {
								let key = $(el).data('name');
								$(el).text(client[key]);
							});

							$(row).find('[data-name="sessionStart"]').text(dt.toFormat('dd.MM.yyyy HH:mm:ss'));
							$(row).find('[data-name="cleanSession"]').html($('<span/>').addClass('fas').addClass(client.sessionStart ? 'fa-check text-success' : 'fa-times text-warning'));

							$('#clients .items').append(row);
						}
					});
				})
				.catch(function (error) {
					console.log('SignalR Error', error);
				});
		});
	</script>
}
